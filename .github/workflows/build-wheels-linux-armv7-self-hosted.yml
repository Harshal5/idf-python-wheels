name: armv7-dispatch

on:
  workflow_dispatch:
    inputs:
      python_version:
        description: 'Python Version'
        required: true
        default: '3.8.10'
      pyenv_version:
        description: "pyenv Version"
        required: true
        default: v2.1.0

jobs:
  get_release:
    name: Get release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.get_upload_url.outputs.url }}
    steps:
    - uses: octokit/request-action@v2.x
      id: get_latest_release
      with:
        route: GET /repos/{owner}/{repo}/releases/latest
        owner: espressif
        repo: idf-python-wheels
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: get upload url
      id: get_upload_url
      run: |
        url=$(echo "$response" | jq -r '.upload_url')
        echo "::set-output name=url::$url"
      env:
        response:  ${{ steps.get_latest_release.outputs.data }}

  build-python-wheels:
    name: Build Python Wheels for ${{ matrix.os }}
    needs: [get_release]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        #os: [macos-latest, self-hosted-macos-arm64, ubuntu-latest, windows-latest]
        #os: [macos-latest, ubuntu-18.04 ]
        #os: [macos-latest, ubuntu-18.04, windows-latest]
        os: [linux-armv7-self-hosted]
        # os: [windows-latest]
        # os: [macos-latest]
        # os: [ [self-hosted, Windows, X64] ]
        # os: [ [self-hosted, macOS, M1] ]
        #os: [ windows-self-hosted, macos-m1-self-hosted ]
        # os: [ windows-self-hosted ]
        include:
        - os: linux-armv7-self-hosted
          ARCH: ''
          ASSET_PATH: './idf-python-wheels.zip'
          ASSET_NAME: 'idf-python-wheels-${{ github.event.inputs.python_version }}-linux-armv7.zip'
          ASSET_CONTENT_TYPE: 'application/zip'
          LLVM_ROOT_OPTION: ''
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set up Python
        if: ${{ matrix.os == 'macos-latest' || matrix.os == 'ubuntu-latest' || matrix.os == 'ubuntu-18.04' || matrix.os == 'windows-latest' }}
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Checkout pyenv
        uses: actions/checkout@v2
        with:
          repository: 'pyenv/pyenv'
          path: "~/.pyenv"
          ref: '${{ github.event.inputs.pyenv_version }}'

      - name: Set up Python locally
        if: ${{ matrix.os == 'linux-armv7-self-hosted' || matrix.os == 'macos-m1-self-hosted' }}
        run: |
          export PYENV_ROOT=~/.pyenv
          export PATH=$PYENV_ROOT/bin:$PATH
          pyenv install -s ${{ github.event.inputs.python_version }}
      - name: Install Rust
        shell: bash
        run: |
        if ( which rustc ); then rustc --version; else curl https://sh.rustup.rs -sSf | bash -s -- --default-toolchain stable -y && export PATH=$PATH:~/.cargo/bin
      - name: Prepare download folder
        shell: pwsh
        run: mkdir download
      - name: Install build dependencies
        shell: pwsh
        run: ~/.pyenv/versions/${{ github.event.inputs.python_version }}/bin/python -m pip install wheel
      - name: Build wheels for IDF master
        env: 
          PIP_EXTRA_INDEX_URL: "https://www.piwheels.org/simple" 
        shell: pwsh
        run: |
          ~/.pyenv/versions/${{ github.event.inputs.python_version }}/bin/python -m pip install --upgrade pip
          .\Build-Wheels.ps1 -Branch "master" -Arch "${{ matrix.ARCH }}" -CompileWheels @("greenlet==1.0.0", "gevent==1.5.0", "cryptography", "windows-curses") -Python "~/.pyenv/versions/${{ github.event.inputs.python_version }}/bin/python"
      - name: Test wheels by installation
        shell: pwsh
        run: .\Test-Wheels.ps1 -Branch "master" -Arch "${{ matrix.ARCH }} -Python "~/.pyenv/versions/${{ github.event.inputs.python_version }}/bin/python""   
      - name: Write version of package to file
        shell: pwsh
        run: ~/.pyenv/versions/${{ github.event.inputs.python_version }}/bin/python -c  "print('${{ github.event.inputs.python_version }}', file=open('download/version.txt', 'w'))"
      - name: Archive artifact
        shell: pwsh
        run: Compress-Archive -Path "download\*" -DestinationPath "${{ matrix.ASSET_PATH }}" 
      
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.get_release.outputs.upload_url }}
          asset_path: ${{ matrix.ASSET_PATH }}
          asset_name: ${{ matrix.ASSET_NAME }}
          asset_content_type: ${{ matrix.ASSET_CONTENT_TYPE }}