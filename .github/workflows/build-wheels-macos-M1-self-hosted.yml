name: macos-M1-dispatch

on:
  workflow_dispatch:
    inputs:
      IDF_branch:
        description: 'Wheels will be built for this branch'
        required: false
        default: 'master'
jobs:
  build-python-wheels:
    name: Build Python Wheels for macos-M1
    runs-on: macos-m1-self-hosted
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.8.12', '3.9.4', '3.10.2']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Cache Python
        id: cache-python
        uses: actions/cache@v2
        with:
          path: ~/.pyenv
          key: pyenv-${{ matrix.python-version }}
      - name: Set up pyenv
        if: steps.cache-python.outputs.cache-hit != 'true'
        run: |
          rm -rf ~/.pyenv
          git clone https://github.com/pyenv/pyenv.git ~/.pyenv
          export PYENV_ROOT=~/.pyenv
          export PATH=$PYENV_ROOT/bin:$PATH
          eval "$(pyenv init --path)"
          pyenv --version
          arch -arm64 pyenv install --skip-existing ${{ matrix.python-version }}
          export CPPFLAGS=-I/Users/githubrunner/brew/opt/openssl/include
          export LDFLAGS=-L/Users/githubrunner/brew/opt/openssl/lib
          ~/.pyenv/versions/${{ matrix.python-version }}/bin/python -m pip install --upgrade pip
      - name: Rust version
        run: rustc --version
      - name: Prepare download folder
        run: mkdir download
      - name: Install build dependencies
        run: ~/.pyenv/versions/${{ matrix.python-version }}/bin/python -m pip install wheel
      - name: Get python3 version
        run: ~/.pyenv/versions/${{ matrix.python-version }}/bin/python --version
      - name: Build wheels for IDF-${{ github.event.inputs.IDF_branch }}
        shell: pwsh
        run: |
          $env:CPPFLAGS="-I/Users/githubrunner/brew/opt/openssl/include"
          $env:LDFLAGS="-L/Users/githubrunner/brew/opt/openssl/lib"
          arch -arm64 pip3 install wheel
          .\Build-Wheels.ps1 -Branch ${{ github.event.inputs.IDF_branch }} -Arch "-arm64" -CompileWheels @("greenlet==1.0.0", "gevent==1.5.0", "cryptography") -Python ~/.pyenv/versions/${{ matrix.python-version }}/bin/python
      - name: Test wheels by installation
        shell: pwsh
        run: |
          $env:CPPFLAGS="-I/Users/githubrunner/brew/opt/openssl/include"
          $env:LDFLAGS="-L/Users/githubrunner/brew/opt/openssl/lib"
          .\Test-Wheels.ps1 -Branch ${{ github.event.inputs.IDF_branch }} -Arch "-arm64" -Python ~/.pyenv/versions/${{ matrix.python-version }}/bin/python
      - name: Upload Release Asset To test s3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          AWS_BUCKET: ${{ secrets.DL_BUCKET }}
          PREFIX: 'pypi'
        shell: bash
        run: |
          chmod +x Upload-Wheels.sh
          ./Upload-Wheels.sh $AWS_BUCKET
          pip3 install boto3
          python3 create_index_pages.py $AWS_BUCKET