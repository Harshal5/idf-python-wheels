name: macos-M1-dispatch

on:
  workflow_dispatch:
    inputs:
      python_version:
        description: 'Python Version'
        required: true
        default: '3.9.0'

jobs:
  get_release:
    name: Get release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.get_upload_url.outputs.url }}
    steps:
    - uses: octokit/request-action@v2.x
      id: get_latest_release
      with:
        route: GET /repos/{owner}/{repo}/releases/latest
        owner: espressif
        repo: idf-python-wheels
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: get upload url
      id: get_upload_url
      run: |
        url=$(echo "$response" | jq -r '.upload_url')
        echo "::set-output name=url::$url"
      env:
        response:  ${{ steps.get_latest_release.outputs.data }}

  build-python-wheels:
    name: Build Python Wheels for ${{ matrix.os }}
    needs: [get_release]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        #os: [macos-latest, self-hosted-macos-arm64, ubuntu-latest, windows-latest]
        #os: [macos-latest, ubuntu-18.04 ]
        #os: [macos-latest, ubuntu-18.04, windows-latest]
        #os: [ubuntu-18.04]
        # os: [windows-latest]
        #os: [macos-latest]
        os: [macos-m1-self-hosted]
        # os: [ [self-hosted, Windows, X64] ]
        # os: [ [self-hosted, macOS, M1] ]
        #os: [ windows-self-hosted, macos-m1-self-hosted ]
        # os: [ windows-self-hosted ]
        include:
        - os: macos-m1-self-hosted
          ARCH: '-arm64'
          ASSET_PATH: './idf-python-wheels.zip'
          ASSET_NAME: 'idf-python-wheels-${{ github.event.inputs.python_version }}-apple-darwin.zip'
          ASSET_CONTENT_TYPE: 'application/zip'
          LLVM_ROOT_OPTION: ''
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set up pyenv
        run: |
          rm -rf ~/.pyenv
          git clone https://github.com/pyenv/pyenv.git ~/.pyenv
          export PYENV_ROOT=~/.pyenv
          export PATH=$PYENV_ROOT/bin:$PATH
          pyenv --version
          pyenv install --skip-existing ${{ github.event.inputs.python_version }}
          ~/.pyenv/versions/${{ github.event.inputs.python_version }}/bin/python --version

      # - name: Prepare download folder
      #   run: mkdir download
      # - name: Install build dependencies
      #   run: |
      #     /usr/bin/python3 -m pip install wheel
      # - name: Export CPP and LD flags
      #   run: |
      #     export CPPFLAGS=-I/usr/local/opt/openssl/include
      #     export LDFLAGS=-L/usr/local/opt/openssl/lib
      #     echo $CPPFLAGS
      #     echo $LDFLAGS
      # - name: Build wheels for IDF master
      #   shell: pwsh
      #   run: |
      #     $env:PATH+=":/home/.cargo/env"
      #     echo $CPPFLAGS
      #     echo $LDFLAGS
      #     .\Build-Wheels.ps1 -Branch "master" -Arch "${{ matrix.ARCH }}" -CompileWheels @("greenlet==1.0.0", "gevent==1.5.0", "cryptography", "windows-curses", "pyyaml") -Python "/usr/bin/python3"
      # - name: Test wheels by installation
      #   shell: pwsh
      #   run: .\Test-Wheels.ps1 -Branch "master" -Arch "${{ matrix.ARCH }}" -Python "/usr/bin/python3"
      # - name: Write version of package to file
      #   shell: pwsh
      #   run: /usr/bin/python3 -c "print('${{ github.event.inputs.python_version }}', file=open('download/version.txt', 'w'))"
     
      # - name: Upload Release Asset To test s3
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      #     AWS_BUCKET: ${{ secrets.DL_BUCKET }}
      #     PREFIX: 'pypi'
      #   run: 
      #     cargo run --manifest-path=upload-wheels/Cargo.toml
      # - name: Archive artifact
      #   shell: pwsh
      #   run: Compress-Archive -Path "download\*" -DestinationPath "${{ matrix.ASSET_PATH }}" 
      
      # - name: Upload Release Asset
      #   id: upload-release-asset
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ needs.get_release.outputs.upload_url }}
      #     asset_path: ${{ matrix.ASSET_PATH }}
      #     asset_name: ${{ matrix.ASSET_NAME }}
      #     asset_content_type: ${{ matrix.ASSET_CONTENT_TYPE }}
